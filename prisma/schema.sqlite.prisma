datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

model TelegramUser {
  id          Int      @id @default(autoincrement())
  telegramId  BigInt   @unique
  username    String?
  firstName   String?
  lastName    String?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userAnswers  UserAnswer[]
  quizSessions UserQuizSession[]
}

model QuizQuestion {
  id                 Int      @id @default(autoincrement())
  question           String
  answers            String // JSON list of strings
  correctAnswerIndex Int
  image              Bytes?
  advice             String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  postedQuestions  PostedQuestion[]
  scheduledQuizzes ScheduledQuiz[]
  quizSessionLinks UserQuizSessionQuestion[]

  @@index([createdAt])
}

model PostedQuestion {
  id             Int      @id @default(autoincrement())
  telegramChatId BigInt
  telegramMsgId  BigInt
  questionId     Int
  postedAt       DateTime @default(now())

  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  userAnswers     UserAnswer[]
  scheduledQuiz   ScheduledQuiz?
  sessionQuestion UserQuizSessionQuestion?

  @@index([questionId])
  @@index([telegramChatId])
  @@index([telegramMsgId])
  @@index([postedAt])
}

model UserAnswer {
  id               Int      @id @default(autoincrement())
  userId           Int
  postedQuestionId Int
  selectedIdx      Int
  isCorrect        Boolean
  answeredAt       DateTime @default(now())

  user           TelegramUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postedQuestion PostedQuestion @relation(fields: [postedQuestionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postedQuestionId])
  @@index([userId, postedQuestionId])
}

model ScheduledQuiz {
  id               Int      @id @default(autoincrement())
  scheduledAt      DateTime
  questionId       Int
  postedQuestionId Int?     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question       QuizQuestion    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  postedQuestion PostedQuestion? @relation(fields: [postedQuestionId], references: [id], onDelete: SetNull)

  @@index([scheduledAt])
  @@index([questionId])
}

model UserQuizSession {
  id          Int       @id @default(autoincrement())
  userId      Int
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  user      TelegramUser              @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions UserQuizSessionQuestion[]

  @@index([userId])
  @@index([startedAt])
}

model UserQuizSessionQuestion {
  id               Int  @id @default(autoincrement())
  sessionId        Int
  questionId       Int
  order            Int
  postedQuestionId Int? @unique

  session        UserQuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question       QuizQuestion    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  postedQuestion PostedQuestion? @relation(fields: [postedQuestionId], references: [id])

  @@index([sessionId, order])
  @@index([questionId])
}
