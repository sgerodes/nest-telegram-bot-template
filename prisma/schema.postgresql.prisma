datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

model TelegramUser {
  id          Int      @id @default(autoincrement())
  telegramId  BigInt   @unique
  username    String?
  firstName   String?
  lastName    String?
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userAnswers UserAnswer[]
}

model QuizQuestion {
  id                 Int      @id @default(autoincrement())
  question           String
  answers            String // JSON list of strings
  correctAnswerIndex Int
  image              Bytes?
  advice             String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  postedQuestions PostedQuestion[]
  SheduledQuiz    SheduledQuiz[]
}

model PostedQuestion {
  id             Int      @id @default(autoincrement())
  quizInstanceId Int
  questionId     Int
  telegramChatId BigInt
  telegramMsgId  BigInt
  postedAt       DateTime @default(now())

  question     QuizQuestion   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  userAnswers  UserAnswer[]
  SheduledQuiz SheduledQuiz[]
}

model UserAnswer {
  id               Int      @id @default(autoincrement())
  userId           Int
  postedQuestionId Int
  selectedIdx      Int
  isCorrect        Boolean
  answeredAt       DateTime @default(now())

  user           TelegramUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postedQuestion PostedQuestion @relation(fields: [postedQuestionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postedQuestionId])
  @@index([userId, postedQuestionId])
}

model SheduledQuiz {
  id               Int      @id @default(autoincrement())
  scheduledAt      DateTime
  questionId       Int
  postedQuestionId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question       QuizQuestion   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  postedQuestion PostedQuestion @relation(fields: [postedQuestionId], references: [id], onDelete: Cascade)
}

